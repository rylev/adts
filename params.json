{"name":"ADTs","tagline":"Algebraic Data Types for Ruby","body":"## Usage\r\n\r\nLet's define a Shape data type:\r\n\r\n```ruby\r\nrequire 'adts'\r\n\r\nShape = ADT do\r\n  Void() |\r\n  Square(width: Fixnum) |\r\n  Rectangle(width: Fixnum, height: Fixnum) |\r\n  Circle(radius: Fixnum) {\r\n    def area\r\n      Math::PI * radius * radius\r\n    end\r\n  }\r\nend\r\n```\r\n\r\nLet's try to instantiate a Shape with our nullary constructor Void:\r\n\r\n```ruby\r\nShape::Void()\r\n# => #<Shape::Void ...>\r\n```\r\n\r\nWhat about a square?\r\n\r\n```ruby\r\nShape::Square(23)\r\n# => #<Shape::Square @width=23>\r\n```\r\n\r\nOur type constructors are even **type-checked**:\r\n\r\n```ruby\r\nShape::Square(\"foo\")\r\n# raises a TypeError\r\n```\r\n\r\nOur ADT implements equality by type and value:\r\n\r\n```ruby\r\nShape::Square(23) == Shape::Square(23)\r\n# => true\r\nShape::Circle(23) == Shape::Square(23)\r\n# => false\r\nShape::Square(23) == Shape::Square(99)\r\n# => false\r\n```\r\n\r\nAll its instances expose (read-only) their respective parameters:\r\n\r\n```ruby\r\nShape::Square(23).width\r\n# => 23\r\n```\r\n\r\nAll instances are a kind of `Shape`:\r\n\r\n```ruby\r\nShape::Square(23).is_a?(Shape)\r\n# => true\r\n```\r\n\r\nAnd finally, our constructors can have their own special methods, just like we\r\ndefined `area` on `Circle`:\r\n\r\n```ruby\r\nShape::Circle(1).area\r\n# => 3.141592653589793\r\n```\r\n\r\n## Installation\r\n\r\nAdd this line to your application's Gemfile:\r\n\r\n```ruby\r\ngem 'adts'\r\n```\r\n\r\nAnd then execute:\r\n\r\n    $ bundle\r\n\r\nOr install it yourself as:\r\n\r\n    $ gem install adts\r\n\r\n## Who's this\r\n\r\nThis was made by [Josep M. Bach (Txus)](http://blog.txus.io) under the MIT\r\nlicense. I am [@txustice][twitter] on twitter (where you should probably follow\r\nme!).\r\n\r\n[twitter]: https://twitter.com/txustice\r\n[adts]: http://en.wikipedia.org/wiki/Algebraic_data_type\r\n","google":"UA-19362711-1","note":"Don't delete this file! It's used internally to help with page regeneration."}